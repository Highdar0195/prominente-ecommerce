import { useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { Tbody, Tr, Td, useToast } from "@chakra-ui/react";
import {
  deleteDoc,
  doc,
  increment,
  updateDoc,
} from "firebase/firestore";

import { db } from "../src/utils/firebase/initClient";
import withPrivate from "../src/utils/routes/withPrivate";
import { PageLayout, TableLayout } from "../src/components/general/layouts";
import AppTable from "../src/components/general/AppTable";
import { useCart } from "../src/utils/contexts/cartContext";
import { MinusIcon, PlusIcon } from "../src/components/general/icons";
import Show from "../src/components/wrapper/Show";
import EmptySection from "../src/components/general/EmptySection";
import CheckoutItem from "../src/components/CheckoutItem";
import { TabNav } from "../src/components/general/tabNavigation";

const CartPage = ({ authContext }) => {
  const { currentUser, userCredentials } = authContext;
  const {
    cartItems,
    totalBill,
    totalCartCount,
    checkoutItems,
    totalPending,
    totalDelivered,
    totalConfirmed,
    totalUnapproved,
  } = useCart();
  const toast = useToast();
  const router = useRouter();

  const [activeTab1, setActiveTab1] = useState(0);
  const [activeTab2, setActiveTab2] = useState(0);

  const cartTableCols = ["Preview", "Item", "Price", "Qty", "Action"];
  const checkoutTableCols = ["Preview", "Item", "Price", "Qty"];

  const cartRef = `users/${currentUser?.uid}/cart`;
  const checkoutsRef = `users/${currentUser?.uid}/checkouts`;

  const incrementItemCount = async (product) => {
    const docRef = doc(db, cartRef, product?.id);
    await updateDoc(docRef, { qty: increment(1) });
  };

  const decrementItemCount = async (product) => {
    const docRef = doc(db, cartRef, product?.id);

    if (product.qty === 1) return;
    await updateDoc(docRef, { qty: increment(-1) });
  };

  const deleteItem = async (product) =>
    await deleteDoc(doc(db, cartRef, product?.id));

  const goToCheckoutPage = async () => {
    if (userCredentials.address === "") {
      toast({
        title: "Error!",
        description: "Please fill up the address form on your profile.",
        status: "error",
        duration: 5000,
        isClosable: true,
        position: "bottom",
      });
      return;
    } else if (userCredentials.contact === "") {
      toast({
        title: "Error!",
        description: "Please provide a contact number on your profile.",
        status: "error",
        duration: 5000,
        isClosable: true,
        position: "bottom",
      });
      return;
    }
    router.push("/checkout");
  };

  const handleDeleteOrder = async (order) =>
    await deleteDoc(doc(db, checkoutsRef, order?.id));

  return (
    <PageLayout pageTitle="My Cart">
      <Head>
        <title>Home | Prominente</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/vercel.svg" />
      </Head>

      <TabNav
        tabs={[
          "To Pay",
          `Pending (${totalPending})`,
          `To Receive (${totalConfirmed})`,
        ]}
        activeTab={activeTab1}
        setter={setActiveTab1}
      />

      <Show when={activeTab1 === 0}>
        <Show when={!totalCartCount}>
          <EmptySection
            btnLabel="SHOP NOW"
            desc="You have an empty cart."
            onClick={() => router.push("/")}
          />
        </Show>
        <Show when={totalCartCount > 0}>
          <TableLayout
            title={`Total: ₱${totalBill}.00`}
            misc={
              <button
                // onClick={handleCheckout}
                onClick={goToCheckoutPage}
                className="btn-primary-filled w-max"
              >
                {`CHECKOUT (${totalCartCount})`}
              </button>
            }
          >
            <AppTable
              colNames={cartTableCols}
              className="max-h-[32rem] md:max-h-[52rem] border"
            >
              <Tbody className="font-light">
                {cartItems?.map((product, i) => (
                  <Tr
                    key={product.id}
                    className=""
                    // onClick={() => setSelectedRow(product)}
                  >
                    <Td className="">
                      <img
                        src={product.image}
                        alt="Picture of the author"
                        className="w-40"
                      />
                    </Td>
                    <Td className="space-y-8">
                      <section className="space-y-1">
                        <h3 className="font-medium">{product.name}</h3>
                        <p className="tracking-widest">{product.details}</p>
                      </section>
                    </Td>
                    <Td>₱ {product.price}.00</Td>
                    <Td className="">
                      <div className="flex space-x-3 items-center">
                        <button
                          className="btn-scale"
                          onClick={() => decrementItemCount(product)}
                        >
                          <MinusIcon className="h-6 w-6" />
                        </button>
                        <p className="">{product.qty}</p>
                        <button
                          className="btn-scale"
                          onClick={() => incrementItemCount(product)}
                        >
                          <PlusIcon className="h-6 w-6 text-teal-400" />
                        </button>
                      </div>
                    </Td>
                    <Td>
                      <button
                        onClick={() => deleteItem(product)}
                        className="underline font-light"
                      >
                        remove
                      </button>
                    </Td>
                  </Tr>
                ))}
              </Tbody>
            </AppTable>
          </TableLayout>
        </Show>
      </Show>

      {/* <section className="max-h-screen border-black border overflow-y-auto"> */}
      <Show when={activeTab1 === 1}>
        <Show when={!totalPending}>
          <EmptySection
            btnLabel="CHECK CART"
            desc="You have not ordered any items."
            onClick={() => setActiveTab1(0)}
          />
        </Show>
        <section className={`order-section ${totalPending > 2 && "pr-8"}`}>
          {checkoutItems
            ?.filter((el) => el.status === "pending")
            .map((checkout) => (
              <CheckoutItem
                key={checkout.id}
                checkout={checkout}
                tableCols={checkoutTableCols}
              />
            ))}
        </section>
      </Show>

      <Show when={activeTab1 === 2}>
        <Show when={!totalConfirmed}>
          <EmptySection
            btnLabel="CHECK PRODUCTS"
            desc="You do not have confirmed orders yet."
            onClick={() => router.push("/")}
          />
        </Show>
        <section className={`order-section ${totalConfirmed > 2 && "pr-8"}`}>
          {checkoutItems
            ?.filter((el) => el.status === "confirmed")
            .map((checkout) => (
              <CheckoutItem
                key={checkout.id}
                checkout={checkout}
                tableCols={checkoutTableCols}
              />
            ))}
        </section>
      </Show>
      {/* </section> */}

      <TabNav
        tabs={[
          `Cancelled (${totalUnapproved})`,
          `Received (${totalDelivered})`,
        ]}
        activeTab={activeTab2}
        setter={setActiveTab2}
      />

      <Show when={activeTab2 === 0}>
        <Show when={!totalUnapproved}>
          <EmptySection
            btnLabel="CHECK PRODUCTS"
            desc="You do not have unapproved orders."
            onClick={() => router.push("/")}
          />
        </Show>
        <section className={`order-section ${totalUnapproved > 2 && "pr-8"}`}>
          {checkoutItems
            ?.filter((el) => el.status === "unapproved")
            .map((checkout) => (
              <CheckoutItem
                key={checkout.id}
                checkout={checkout}
                tableCols={checkoutTableCols}
                deleteOrderHandler={() => handleDeleteOrder(checkout)}
              />
            ))}
        </section>
      </Show>

      <Show when={activeTab2 === 1}>
        <Show when={!totalDelivered}>
          <EmptySection
            btnLabel="CHECK PRODUCTS"
            desc="You have not receive any orders yet."
            onClick={() => router.push("/")}
          />
        </Show>
        <section className={`order-section ${totalDelivered > 2 && "pr-8"}`}>
          {checkoutItems
            ?.filter((el) => el.status === "delivered")
            .map((checkout) => (
              <CheckoutItem
                key={checkout.id}
                checkout={checkout}
                tableCols={checkoutTableCols}
                deleteOrderHandler={() => handleDeleteOrder(checkout)}
              />
            ))}
        </section>
      </Show>
    </PageLayout>
  );
};

export default withPrivate(CartPage);
