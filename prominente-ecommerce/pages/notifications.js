import { useState, useEffect } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useToast } from "@chakra-ui/react";
import { doc, deleteDoc, updateDoc } from "firebase/firestore";

import { db } from "../src/utils/firebase/initClient";
import withPrivate from "../src/utils/routes/withPrivate";
import { PageLayout } from "../src/components/general/layouts";
import Show from "../src/components/wrapper/Show";
import EmptySection from "../src/components/general/EmptySection";
import { TabNav } from "../src/components/general/tabNavigation";
import { useNotif } from "../src/utils/contexts/NotifContext";

const NotifComponent = ({ notif, handler }) => {
  return (
    <div className="rounded-md border p-8 space-y-7">
      <section className="space-y-2">
        <h3 className="font-semibold capitalize tracking-wider">
          {notif.title}
        </h3>
        <p>{notif.details}</p>
      </section>
      <section className="space-y-2">
        <span className="font-light text-right">
          {notif.timestamp?.toDate().toDateString()}
        </span>
        <p
          onClick={handler}
          className="font-semibold underline cursor-pointer text-right"
        >
          {notif.read === "false" ? "Mark As Read" : "Remove"}
        </p>
      </section>
    </div>
  );
};

const Notifications = ({ authContext }) => {
  const { notifs, notifCount } = useNotif();
  const { currentUser } = authContext;

  const toast = useToast();
  const router = useRouter();

  const [activeTab, setActiveTab] = useState(0);

  const handleMarkAllAsRead = () => {
    notifs.forEach((notif) => {
      const ref = doc(db, `users/${currentUser?.uid}/notifications`, notif.id);

      if (notif.read === "true") {
        deleteDoc(ref);
        return;
      }
      updateDoc(ref, { read: "true" });
    });
  };

  const handleMarkAsRead = async (notif) => {
    const ref = doc(db, `users/${currentUser?.uid}/notifications`, notif.id);

    if (notif.read === "true") {
      await deleteDoc(ref);
      return;
    }
    await updateDoc(ref, { read: "true" });
  };

  return (
    <PageLayout pageTitle="Notifications">
      <Head>
        <title>Notifications | Prominente</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/vercel.svg" />
      </Head>

      <TabNav
        tabs={[`New Notifications (${notifCount})`, "Marked Read"]}
        activeTab={activeTab}
        setter={setActiveTab}
      />

      <Show when={activeTab === 0}>
        <Show when={notifCount === 0}>
          <EmptySection
            btnLabel="SHOP NOW"
            desc="No new notifications."
            onClick={() => router.push("/")}
          />
        </Show>
        <Show when={notifCount > 0}>
          <Show when={notifCount > 1}>
            <p
              onClick={handleMarkAllAsRead}
              className="font-semibold underline cursor-pointer text-right"
            >
              Mark All As Read
            </p>
          </Show>

          {notifs
            ?.filter((el) => el.read === "false")
            .map((notif) => (
              <NotifComponent
                key={notif.id}
                notif={notif}
                handler={() => handleMarkAsRead(notif)}
              />
            ))}
        </Show>
      </Show>

      <Show when={activeTab === 1}>
        <Show when={notifs?.filter((el) => el.read === "true").length === 0}>
          <EmptySection
            btnLabel="CHECK NOTIFICATIONS"
            desc="No notification marked as read."
            onClick={() => setActiveTab(0)}
          />
        </Show>
        <Show when={notifs?.filter((el) => el.read === "true").length > 0}>
          <Show when={notifs?.filter((el) => el.read === "true").length > 1}>
            <p
              onClick={handleMarkAllAsRead}
              className="font-semibold underline cursor-pointer text-right"
            >
              Remove All
            </p>
          </Show>

          {notifs
            ?.filter((el) => el.read === "true")
            .map((notif) => (
              <NotifComponent
                key={notif.id}
                notif={notif}
                handler={() => handleMarkAsRead(notif)}
              />
            ))}
        </Show>
      </Show>
    </PageLayout>
  );
};

export default withPrivate(Notifications);
