import Head from "next/head";
import { useState } from "react";
import {
  FormLayout,
  FormHeading,
  FormInput,
  FormFooter,
  FormControl,
  FormHeroImage,
} from "../src/components/general/formComponents";
import withPublic from "../src/utils/routes/withPublic";

function SignUp({ authContext }) {
  const { signup } = authContext;

  const [firstname, setFirstname] = useState("");
  const [surname, setSurname] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirm, setPasswordConfirm] = useState("");

  const [error, setError] = useState("");

  const handleSignup = async (e) => {
    e.preventDefault();
    if (password !== passwordConfirm) {
      return setError("Passwords do not match");
    }
    await signup(firstname, surname, email, password);
  };

  return (
    <div>
      <Head>
        <title>Sign Up | Prominente</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/vercel.svg" />
      </Head>

      <div className="flex">
        <FormLayout>
          <FormHeading
            header="Sign up for an account"
            subheader="So we can bring you the elements of style!"
          />
          <FormControl onSubmit={handleSignup}>
            <FormInput
              fieldLabel="First Name"
              type="text"
              onChange={(e) => setFirstname(e.target.value)}
            />
            <FormInput
              fieldLabel="Surname"
              type="text"
              onChange={(e) => setSurname(e.target.value)}
            />
            <FormInput
              fieldLabel="Email Address"
              type="email"
              onChange={(e) => setEmail(e.target.value)}
            />
            <FormInput
              fieldLabel="Password"
              passwordCondition="(must be at least 6 characters)"
              type="password"
              onChange={(e) => setPassword(e.target.value)}
            />
            <FormInput
              fieldLabel="Confirm Password"
              type="password"
              onChange={(e) => setPasswordConfirm(e.target.value)}
            />
            {error && <p className="text-red-600">{error}</p>}
            <button className="btn-primary-filled" type="submit">
              Sign up
            </button>
          </FormControl>
          <FormFooter
            footer="Already have an account?"
            href="/login"
            type="Log in"
          />
        </FormLayout>
        <FormHeroImage logoPos="top-8 right-8" />
      </div>
    </div>
  );
}

export default withPublic(SignUp);
